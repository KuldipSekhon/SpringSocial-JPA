<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <context:component-scan base-package="com"/>

    <mvc:annotation-driven/>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">


        <property name="prefix">
            <value>/WEB-INF/pages/</value>
        </property>

        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/Users"/>

        <property name="username" value="root"/>

        <property name="password" value="mysql"/>

    </bean>




    <!--<bean class="org.springframework.social.connect.web.ConnectController">-->
        <!--&lt;!&ndash; relies on by-type autowiring for the constructor-args &ndash;&gt;-->
        <!--<property name="applicationUrl" value="${application.url}" />-->
    <!--</bean>-->



    <!--<bean class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository"/>-->

    <!--&lt;!&ndash; Twitter Service Provider &ndash;&gt;-->

    <!--<bean class="org.springframework.social.twitter.connect.TwitterServiceProvider">-->
        <!--<constructor-arg value="${twitter.consumerKey}" />-->
        <!--<constructor-arg value="${twitter.consumerSecret}" />-->
        <!--<constructor-arg ref="connectionRepository" />-->
    <!--</bean>-->


    <!--&lt;!&ndash; Configure a connection repository through which account-to-provider connections will be stored &ndash;&gt;-->
    <!--<bean id="connectionRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">-->
        <!--<constructor-arg ref="dataSource" />-->
        <!--<constructor-arg ref="connectionFactoryLocator"/>-->
        <!--<constructor-arg ref="textEncryptor" />-->
    <!--</bean>-->

    <!-- Beans configuration for the classes to implement AOP ***** -->
<!--
    <bean id="socialController" class="com.common.SocialController"/>
    <bean id="socialAdvice" class="com.aop.SocialAdvice"/>
    <bean id="socialAdvisor" class="com.aop.SocialAdvisor">
        <property name="socialAdvice" ref="socialAdvice"/>
    </bean>

     To Define the AOPConfiguration: Runtime Weaving using the RegexpmethodPointCutAdvisor

    <bean id="SocialControllerBeforeAndAfterAdvice" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
           <ref local="socialAdvisor"/>
        </property>
        <property name="pattern">
            <value>.*</value>
        </property>

    </bean>

    - To configure the Proxy bean which in turn calls the Implementation of the Advisor: here i.e. SocialControllerBeforeAndAfterAdvice
    <bean id="SocialProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
   <property name="target">
       <ref local="socialAdvisor"></ref>
   </property>
        
   <property name="interceptorNames">
       <value>SocialControllerBeforeAndAfterAdvice</value>
   </property>
    </bean>
    -->

</beans>